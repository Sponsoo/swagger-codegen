{{>licenseInfo}}
import { autoinject }   from 'aurelia-framework';
import {
  HttpClient,
  HttpResponseMessage,
  RequestBuilder,
}                       from 'aurelia-http-client';
import { TokenStorage } from './TokenStorage';

export interface BeforeRequestEvent {
  url: string;
  body?: any;
  authentication: string[];
  request: RequestBuilder;
  promise?: Promise<any>;
}

export interface AfterResponseEvent {
  url: string;
  response: HttpResponseMessage;
  promise?: Promise<any>;
}

const BASE_PATH = 'https://localhost/api/v2'
  .replace(/^(https?:\/\/)?[^\/]+/, '')
  .replace(/\/+$/, '');

/**
 * Class to handle http requests
 */
@autoinject()
export class HttpService {

  /**
   * Constructor.
   */
  constructor(
    private httpClient: HttpClient,
    private tokenStorage: TokenStorage,
  ) {
    this.httpClient.configure((builder) => {
      builder
        .withBaseUrl(BASE_PATH)
        .withInterceptor({
          response(message: HttpResponseMessage): HttpResponseMessage {
            const { headers } = message;

            const csrfToken = headers.get('XSRF-TOKEN');

            if (csrfToken) {
              tokenStorage.setCsrfToken(csrfToken);
            }

            return message;
          },
        });
    });
  }

  /**
   * Creates request.
   */
  public createRequest(url: string): RequestBuilder {
    return this.httpClient.createRequest(url);
  }

  /**
   * Adds the authorization header to the request.
   */
  async addAuthHeader(tokenName: string, header: string, req: RequestBuilder): Promise<RequestBuilder> {
    if (tokenName === 'UserToken') {
      const token = this.tokenStorage.getUserToken();
      return req.withHeader(header, `Bearer ${token}`);
    }

    if (tokenName === 'RefreshToken') {
      const token = this.tokenStorage.getRefreshToken();
      return req.withHeader(header, `Bearer ${token}`);
    }

    if (tokenName === 'CsrfToken') {
      const token = this.tokenStorage.getCsrfToken();
      this.tokenStorage.setCsrfToken(null);
      return req.withHeader(header, token);
    }

    return req;
  }

  /**
   * Adds the authorization param to the request.
   */
  async addAuthParam(tokenName: string, param: string, req: RequestBuilder): Promise<RequestBuilder> {
    if (tokenName === 'UserToken') {
      const token = this.tokenStorage.getUserToken();

      const params  = {};
      params[param] = token;

      return req.withParams(params);
    }

    if (tokenName === 'RefreshToken') {
      const token = this.tokenStorage.getRefreshToken();

      const params  = {};
      params[param] = token;

      return req.withParams(params);
    }

    if (tokenName === 'CsrfToken') {
      const token = this.tokenStorage.getCsrfToken();
      this.tokenStorage.setCsrfToken(null);

      const params  = {};
      params[param] = token;

      return req.withParams(params);
    }

    return req;
  }

}
