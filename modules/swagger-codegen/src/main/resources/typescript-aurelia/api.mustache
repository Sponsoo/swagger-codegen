{{>licenseInfo}}
import { EventAggregator } from 'aurelia-event-aggregator';
import { autoinject }      from 'aurelia-framework';
import { Api }             from './Api';
import {
  AfterResponseEvent,
  BeforeRequestEvent,
  HttpService,
}     from './HttpService';
import {
{{#modelImports}}  I{{this}},
{{/modelImports}}
}                          from './models';
{{#operations}}
{{#operation}}

/**
 * {{operationId}} - parameters interface
 */
export interface I{{operationIdCamelCase}}Params {
{{#allParams}}  {{paramName}}{{^required}}?{{/required}}: {{^isPrimitiveType}}I{{/isPrimitiveType}}{{{dataType}}};
{{/allParams}}
}
{{/operation}}

/**
 * {{classname}} - API interface{{#description}}
 * {{&description}}{{/description}}
 */
export interface I{{classname}} {
{{#operation}}

  /**{{#summary}}
   * {{summary}}
   *{{/summary}}{{#notes}}
   * {{notes}}{{/notes}}{{#allParams}}
   * @param params.{{paramName}} {{description}}{{/allParams}}
   */
  {{nickname}}({{#hasParams}}params: I{{operationIdCamelCase}}Params{{/hasParams}});
{{/operation}}

}

/**
 * {{classname}} - API class{{#description}}
 * {{&description}}{{/description}}
 */
@autoinject()
export class {{classname}} extends Api implements I{{classname}} {

  /**
   * Creates a new {{classname}} class.
   */
  constructor(protected events: EventAggregator, httpService: HttpService) {
    super(events, httpService);
  }
{{#operation}}

  /**{{#summary}}
   * {{summary}}
   *{{/summary}}{{#notes}}
   * {{notes}}{{/notes}}{{#allParams}}
   * @param params.{{paramName}} {{description}}{{/allParams}}
   */
  async {{nickname}}({{#hasParams}}params: I{{operationIdCamelCase}}Params{{/hasParams}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
    let request, response;

    // Verify required parameters are set
{{#allParams}}
{{#required}}
    this.ensureParamIsSet('{{nickname}}', params, '{{paramName}}');
{{/required}}
{{/allParams}}

    // Create URL to call
    const url = `{{{path}}}`{{#pathParams}}
      .replace(`{${'{{baseName}}'}}`, `${params['{{paramName}}']}`){{/pathParams}};

    request = this.httpService.createRequest(url);

    // Set HTTP method
    request.as{{httpMethod}}();

    // Create before request event
    const beforeEvent: BeforeRequestEvent = { url, authentication: [], request };
{{#hasBodyParam}}
{{#bodyParam}}

    beforeEvent.body = params['{{paramName}}'];
{{/bodyParam}}
{{/hasBodyParam}}
{{#authMethods}}
{{#isApiKey}}

    // Authentication '{{name}}' required
    beforeEvent.authentication.push('{{name}}');
{{/isApiKey}}
{{/authMethods}}

    // Publish before request event
    this.events.publish('swagger:request:before', beforeEvent);

    if (beforeEvent.promise) {
      await beforeEvent.promise;
    }

    request = beforeEvent.request;
{{#hasQueryParams}}

    // Set query parameters
    request.withParams({
      {{#queryParams}}'{{baseName}}': params['{{paramName}}'],
      {{/queryParams}}
    });
{{/hasQueryParams}}
{{#hasFormParams}}

    // Encode form parameters
    request.withHeader('content-type', 'application/x-www-form-urlencoded');
    request.withContent(this.queryString({
      {{#formParams}}'{{baseName}}': params['{{paramName}}'],
      {{/formParams}}
    }));
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParam}}

    // Encode body parameter
    request.withHeader('content-type', 'application/json');
    request.withContent(JSON.stringify(params['{{paramName}}'] || {}));
{{/bodyParam}}
{{/hasBodyParam}}
{{#headerParams}}
    request.withHeader('{{baseName}}', params['{{paramName}}']);
{{/headerParams}}
{{#authMethods}}

    // Authentication '{{name}}' required
{{#isApiKey}}
{{#isKeyInHeader}}
    await this.httpService.addAuthHeader('{{name}}', '{{keyParamName}}', request);
{{/isKeyInHeader}}
{{#isKeyInQuery}}
    await this.httpService.addAuthParam('{{name}}, '{{keyParamName}}', request);
{{/isKeyInQuery}}
{{/isApiKey}}
{{/authMethods}}
{{^hasAuthMethods}}

    if (['POST', 'PUT', 'PATCH', 'DELETE'].indexOf('{{httpMethod}}'.toUpperCase()) !== -1) {
      // CSRF authorization required
      await this.httpService.addAuthHeader('CsrfToken', 'XSRF-TOKEN', request);
    }
{{/hasAuthMethods}}

    // Send the request
    response = await request.send();

    // Publish after response event
    const afterEvent: AfterResponseEvent = { url, response };
    this.events.publish('swagger:response:after', afterEvent);
    response = await afterEvent.response;

    // Check for response status
    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }
{{/operation}}

}
{{/operations}}
